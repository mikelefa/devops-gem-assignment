pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/pod-template.yaml'
      defaultContainer 'docker'
    }
  }

  environment {
    CONTAINER_NAME = 'gem_sim_container'
    IMAGE_NAME = 'mikelefakadu/ros_gem_sim'
    IMAGE_TAG = 'latest'
  }

  stages {

    stage('Checkout') {
      steps {
        container('docker') {
          checkout scm
        }
      }
    }

    stage('Start Docker Daemon') {
      steps {
        container('docker') {
          sh 'dockerd-entrypoint.sh &'
          sh 'until docker info; do echo "Waiting for Docker..."; sleep 5; done'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker') {
        withCredentials([usernamePassword(
            credentialsId: 'dockerhub-creds',
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
        )]) {
            sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

            docker pull $IMAGE_NAME:$IMAGE_TAG || echo "No cached image found"

            docker build --cache-from=$IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:$IMAGE_TAG -f docker/Dockerfile .

            docker push $IMAGE_NAME:$IMAGE_TAG
            '''
        }
        }
      }
    }

    stage('Run Simulation + Evaluation') {
      steps {
        container('docker') {
          // Start container
          sh """
          docker run -d \
            --name ${CONTAINER_NAME} \
            --env LIBGL_ALWAYS_SOFTWARE=1 \
            --env DISPLAY=:99 \
            --network host \
            --privileged \
            ${IMAGE_NAME}
          """

          // Wait until it's running
          sh '''
          for i in {1..10}; do
            STATUS=$(docker inspect --format '{{.State.Status}}' gem_sim_container || echo 'exited')
            if [ "$STATUS" = "running" ]; then
              echo "Container is running."
              break
            fi
            echo "Waiting for container... ($i)"
            sleep 3
          done
          '''

          // Start Xvfb first
          sh '''
          docker exec ${CONTAINER_NAME} bash -c '
            Xvfb :99 -screen 0 1280x1024x24 &
            sleep 2
          '
          '''

          // Start roslaunch in a new tmux session
          sh '''
          docker exec ${CONTAINER_NAME} bash -c '
            source /opt/ros/noetic/setup.bash && \
            source /ros_ws/devel/setup.bash && \
            export DISPLAY=:99 && \
            tmux new-session -d -s ros_session "roslaunch gem_gazebo gem_gazebo_rviz.launch gui:=false use_rviz:=false"
          '
          '''

          // Start gem_sensor_info in a new tmux window
          sh '''
          docker exec ${CONTAINER_NAME} bash -c '
            tmux new-window -t ros_session "sleep 10 && roslaunch gem_gazebo gem_sensor_info.launch"
          '
          '''

          // Start pure_pursuit_sim.py in another tmux window
          sh '''
          docker exec ${CONTAINER_NAME} bash -c '
            tmux new-window -t ros_session "sleep 5 && echo 'Starting sim...' >> /tmp/pure_pursuit.log && rosrun gem_pure_pursuit_sim pure_pursuit_sim.py >> /tmp/pure_pursuit.log 2>&1 || echo 'Sim crashed' >> /tmp/pure_pursuit.log"
          '
          '''

          sh 'docker exec gem_sim_container bash -c "tail -n 30 /tmp/pure_pursuit.log || echo \'No sim log found\'"'
          sh 'docker exec gem_sim_container bash -c "rosnode list"'

          // Optional: show active tmux sessions
          sh "docker exec ${CONTAINER_NAME} tmux ls || echo 'No tmux session running'"

          // Wait for cross_track_error topic to be published
          sh '''
          docker exec gem_sim_container bash -c '
            source /ros_ws/devel/setup.bash && \
            timeout 15 bash -c "until rostopic list | grep /cross_track_error; do echo Waiting for topic...; sleep 1; done"
          '
          '''

          // Show the last few logs from the pure pursuit sim
          sh 'docker exec gem_sim_container bash -c "tail -n 30 /tmp/pure_pursuit.log || echo \'No sim log found\'"'
  
          // Run evaluation script
          sh '''
          docker exec gem_sim_container bash -c '
            source /ros_ws/devel/setup.bash && \
            rosrun gem_pure_pursuit_sim evaluate_cross_track_error.py
          '
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Test passed!"
      mail to: 'gemcicd@gmail.com',
           subject: '✅ GEM Simulation Success',
           body: 'Simulation test passed. Cross-track error < 1m.'
    }
    failure {
      echo "❌ Test failed!"
      mail to: 'gemcicd@gmail.com',
           subject: '❌ GEM Simulation Failed',
           body: 'Simulation test failed. See Jenkins console output for details.'
    }
    always {
      container('docker') {
        sh "docker rm -f ${CONTAINER_NAME} || true"
        sh "docker image prune -f || true"
      }
    }
  }
}
