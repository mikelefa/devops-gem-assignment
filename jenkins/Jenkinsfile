pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/pod-template.yaml'
      defaultContainer 'docker'
    }
  }

  environment {
    IMAGE_NAME = 'ros_gem_sim'
    CONTAINER_NAME = 'gem_sim_container'
  }

  stages {

    stage('Checkout') {
      steps {
        container('docker') {
          checkout scm
        }
      }
    }

    stage('Start Docker Daemon') {
      steps {
        container('docker') {
          sh 'dockerd-entrypoint.sh &'
          sh 'until docker info; do echo "Waiting for Docker..."; sleep 5; done'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker') {
          sh "docker build -t ${IMAGE_NAME} -f docker/Dockerfile ."
        }
      }
    }

    stage('Run Simulation + Evaluation') {
      steps {
        container('docker') {
          // Start container detached
          sh '''
          docker run -d \
            --name gem_sim_container \
            --env LIBGL_ALWAYS_SOFTWARE=1 \
            --env DISPLAY=:99 \
            --network host \
            --privileged \
            ros_gem_sim
          '''

          // Wait for container to be fully up
          sh '''
          for i in {1..10}; do
            STATUS=$(docker inspect --format '{{.State.Status}}' gem_sim_container || echo 'exited')
            if [ "$STATUS" = "running" ]; then
              echo "Container is running."
              break
            fi
            echo "Waiting for container... ($i)"
            sleep 3
          done
          '''

          // Launch simulation via tmux inside container
          sh '''
          docker exec gem_sim_container bash -c '
            source /opt/ros/noetic/setup.bash && \
            source /ros_ws/devel/setup.bash && \
            Xvfb :99 -screen 0 1280x1024x24 & \
            export DISPLAY=:99 && \
            tmux new-session -d -s ros_session "roslaunch gem_gazebo gem_gazebo_rviz.launch gui:=false use_rviz:=false" && \
            tmux new-window -t ros_session "sleep 10 && roslaunch gem_gazebo gem_sensor_info.launch" && \
            tmux new-window -t ros_session "sleep 5 && rosrun gem_pure_pursuit_sim pure_pursuit_sim.py"
          '
          '''

          // Wait before evaluation
          sh 'sleep 15'

          // Run evaluation script
          sh '''
          docker exec gem_sim_container bash -c '
            source /ros_ws/devel/setup.bash && \
            rosrun gem_pure_pursuit_sim evaluate_cross_track_error.py
          '
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Test passed!"
      mail to: 'gemcicd@gmail.com',
           subject: '✅ GEM Simulation Success',
           body: 'Simulation test passed. Cross-track error < 1m.'
    }
    failure {
      echo "❌ Test failed!"
      mail to: 'gemcicd@gmail.com',
           subject: '❌ GEM Simulation Failed',
           body: 'Simulation test failed. See Jenkins console output for details.'
    }
    always {
      container('docker') {
        sh "docker rm -f ${CONTAINER_NAME} || true"
        sh "docker image prune -f || true"
      }
    }
  }
}
