pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/pod-template.yaml'
      defaultContainer 'docker'
    }
  }

  environment {
    IMAGE_NAME = 'ros_gem_sim'
    CONTAINER_NAME = 'gem_sim_container'
  }

  stages {

    stage('Checkout') {
      steps {
        container('docker') {
          checkout scm
        }
      }
    }

    stage('Start Docker Daemon') {
      steps {
        container('docker') {
          sh 'dockerd-entrypoint.sh &'
          // Wait for Docker to be ready
          sh 'until docker info; do echo "Waiting for Docker..."; sleep 5; done'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker') {
          sh "docker build -t $IMAGE_NAME -f docker/Dockerfile ."
        }
      }
    }

    stage('Run Simulation + Evaluation') {
      steps {
        container('docker') {
          sh """
          docker run -d \
            --name $CONTAINER_NAME \
            --env LIBGL_ALWAYS_SOFTWARE=1 \
            --env DISPLAY=:99 \
            --network host \
            --privileged \
            $IMAGE_NAME
          """

          // Check if container is up
          sh "docker inspect --format '{{.State.Status}}' $CONTAINER_NAME || docker logs $CONTAINER_NAME"

          // Stream logs (keep it synchronous)
          sh "docker logs -f $CONTAINER_NAME"

          // Launch simulation using tmux inside container
          sh """
          docker exec $CONTAINER_NAME bash -c "
            source /opt/ros/noetic/setup.bash && \
            source /ros_ws/devel/setup.bash && \
            tmux new-session -d -s ros_session \\"sleep 10 && roslaunch gem_gazebo gem_sensor_info.launch\\" \\; \
            tmux new-window -t ros_session \\"sleep 5 && rosrun gem_pure_pursuit_sim pure_pursuit_sim.py\\"
            "
          """

          // Run evaluation script inside the container
          sh """
          docker exec $CONTAINER_NAME bash -c '
            source /ros_ws/devel/setup.bash && \
            rosrun gem_pure_pursuit_sim evaluate_cross_track_error.py'
          """
        }
      }
    }
  }

  post {
    success {
      echo "✅ Test passed!"
      mail to: 'gemcicd@gmail.com',
           subject: '✅ GEM Simulation Success',
           body: 'Simulation test passed. Cross-track error < 1m.'
    }
    failure {
      echo "❌ Test failed!"
      mail to: 'gemcicd@gmail.com',
           subject: '❌ GEM Simulation Failed',
           body: 'Simulation test failed. See Jenkins console output for details.'
    }
    always {
      container('docker') {
        sh "docker rm -f $CONTAINER_NAME || true"
        sh 'docker image prune -f || true'
      }
    }
  }
}
